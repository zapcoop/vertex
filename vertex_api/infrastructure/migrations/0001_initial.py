# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-11-17 16:11
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0003_auto_20171114_1717'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceBayTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, null=True, verbose_name='modified at')),
                ('name', models.CharField(max_length=64)),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
            ],
            options={
                'ordering': ['device_definition', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, null=True, verbose_name='modified at')),
                ('interface_ordering', models.PositiveSmallIntegerField(choices=[[1, 'Slot/position'], [2, 'Name (alphabetically)']], default=1)),
                ('has_serial_ports', models.BooleanField(default=False, help_text='This type of device has serial console ports used to control other serial devices', verbose_name='Has serial port(s)')),
                ('has_power_outlets', models.BooleanField(default=False, help_text='This type of device has power outlets', verbose_name='Has power outlet(s)')),
                ('has_network_interfaces', models.BooleanField(default=True, help_text='This type of device has one or more network interfaces that are not dedicated to management', verbose_name='Is a network enabled device')),
                ('subdevice_role', models.NullBooleanField(choices=[(None, 'None'), (True, 'Parent'), (False, 'Child')], default=None, help_text='Parent devices house child devices in device bays. Select "None" if this device type is neither a parent nor a child.', verbose_name='Parent/child status')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='inventory.Item')),
            ],
        ),
        migrations.CreateModel(
            name='InterfaceTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, null=True, verbose_name='modified at')),
                ('name', models.CharField(max_length=64)),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('form_factor', models.PositiveSmallIntegerField(choices=[['Virtual interfaces', [[0, 'Virtual'], [200, 'Link Aggregation Group (LAG)']]], ['Ethernet (fixed)', [[800, '100BASE-TX (10/100ME)'], [1000, '1000BASE-T (1GE)'], [1150, '10GBASE-T (10GE)'], [1170, '10GBASE-CX4 (10GE)']]], ['Ethernet (modular)', [[1050, 'GBIC (1GE)'], [1100, 'SFP (1GE)'], [1200, 'SFP+ (10GE)'], [1300, 'XFP (10GE)'], [1310, 'XENPAK (10GE)'], [1320, 'X2 (10GE)'], [1350, 'SFP28 (25GE)'], [1400, 'QSFP+ (40GE)'], [1500, 'CFP (100GE)'], [1600, 'QSFP28 (100GE)']]], ['Wireless', [[2600, 'IEEE 802.11a'], [2610, 'IEEE 802.11b/g'], [2620, 'IEEE 802.11n'], [2630, 'IEEE 802.11ac'], [2640, 'IEEE 802.11ad']]], ['FibreChannel', [[3010, 'SFP (1GFC)'], [3020, 'SFP (2GFC)'], [3040, 'SFP (4GFC)'], [3080, 'SFP+ (8GFC)'], [3160, 'SFP+ (16GFC)']]], ['Serial', [[4000, 'T1 (1.544 Mbps)'], [4010, 'E1 (2.048 Mbps)'], [4040, 'T3 (45 Mbps)'], [4050, 'E3 (34 Mbps)']]], ['Stacking', [[5000, 'Cisco StackWise'], [5050, 'Cisco StackWise Plus'], [5100, 'Cisco FlexStack'], [5150, 'Cisco FlexStack Plus'], [5200, 'Juniper VCP']]], ['Other/Unknown', [[32767, 'Other']]]], default=1200)),
                ('mgmt_only', models.BooleanField(default=False, verbose_name='Management only')),
                ('device_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interface_templates', to='infrastructure.DeviceDefinition')),
            ],
            options={
                'ordering': ['device_definition', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PowerOutletTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, null=True, verbose_name='modified at')),
                ('name', models.CharField(max_length=64)),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('device_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='power_outlet_templates', to='infrastructure.DeviceDefinition')),
            ],
            options={
                'ordering': ['device_definition', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PowerPortTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, null=True, verbose_name='modified at')),
                ('name', models.CharField(max_length=64)),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('device_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='power_port_templates', to='infrastructure.DeviceDefinition')),
            ],
            options={
                'ordering': ['device_definition', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SerialPortTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, null=True, verbose_name='modified at')),
                ('name', models.CharField(max_length=64)),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('device_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='serial_port_templates', to='infrastructure.DeviceDefinition')),
            ],
            options={
                'ordering': ['device_definition', 'name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='devicebaytemplate',
            name='device_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_bay_templates', to='infrastructure.DeviceDefinition'),
        ),
        migrations.AlterUniqueTogether(
            name='serialporttemplate',
            unique_together=set([('device_definition', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='powerporttemplate',
            unique_together=set([('device_definition', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='poweroutlettemplate',
            unique_together=set([('device_definition', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='interfacetemplate',
            unique_together=set([('device_definition', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='devicebaytemplate',
            unique_together=set([('device_definition', 'name')]),
        ),
    ]
