# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-01-04 18:28
from __future__ import unicode_literals

import colorfield.fields
from django.db import migrations, models
import django.db.models.deletion
import netmiko.a10.a10_ssh
import netmiko.accedian.accedian_ssh
import netmiko.alcatel.alcatel_aos_ssh
import netmiko.alcatel.alcatel_sros_ssh
import netmiko.arista.arista_ssh
import netmiko.aruba.aruba_ssh
import netmiko.avaya.avaya_ers_ssh
import netmiko.avaya.avaya_vsp_ssh
import netmiko.brocade.brocade_fastiron_ssh
import netmiko.brocade.brocade_netiron_ssh
import netmiko.brocade.brocade_nos_ssh
import netmiko.checkpoint.checkpoint_gaia_ssh
import netmiko.ciena.ciena_saos_ssh
import netmiko.cisco.cisco_asa_ssh
import netmiko.cisco.cisco_ios
import netmiko.cisco.cisco_nxos_ssh
import netmiko.cisco.cisco_s300
import netmiko.cisco.cisco_tp_tcce
import netmiko.cisco.cisco_wlc_ssh
import netmiko.cisco.cisco_xr_ssh
import netmiko.dell.dell_force10_ssh
import netmiko.dell.dell_powerconnect_ssh
import netmiko.dell.dell_powerconnect_telnet
import netmiko.eltex.eltex_ssh
import netmiko.enterasys.enterasys_ssh
import netmiko.extreme.extreme_ssh
import netmiko.extreme.extreme_wing_ssh
import netmiko.f5.f5_ltm_ssh
import netmiko.fortinet.fortinet_ssh
import netmiko.hp.hp_comware_ssh
import netmiko.hp.hp_procurve_ssh
import netmiko.huawei.huawei_ssh
import netmiko.juniper.juniper_ssh
import netmiko.linux.linux_ssh
import netmiko.mellanox.mellanox_ssh
import netmiko.mrv.mrv_ssh
import netmiko.ovs.ovs_linux_ssh
import netmiko.paloalto.paloalto_panos_ssh
import netmiko.pluribus.pluribus_ssh
import netmiko.quanta.quanta_mesh_ssh
import netmiko.terminal_server.terminal_server
import netmiko.ubiquiti.edge_ssh
import netmiko.vyos.vyos_ssh


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0001_initial'),
        ('infrastructure', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, null=True, verbose_name='modified at')),
                ('name', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('wall', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'North'), (2, 'South'), (4, 'West'), (8, 'East'), (5, 'North-West'), (9, 'North-East'), (6, 'South-West'), (10, 'South-East')], null=True, verbose_name='Wall')),
                ('status', models.PositiveSmallIntegerField(choices=[[1, 'Active'], [0, 'Offline'], [2, 'Planned'], [3, 'Staged'], [4, 'Failed'], [5, 'Stockroom']], default=1, verbose_name='Status')),
                ('notes', models.TextField(blank=True)),
                ('asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='inventory.Asset')),
                ('device_definition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='instances', to='infrastructure.DeviceDefinition')),
            ],
            options={
                'ordering': ['name'],
                'permissions': (('netmiko_read', 'Read-only access to devices via netmiko'), ('netmiko_write', 'Read/write access to devices via netmiko')),
            },
        ),
        migrations.CreateModel(
            name='DeviceRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('color', colorfield.fields.ColorField(max_length=18)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('form_factor', models.PositiveSmallIntegerField(choices=[['Virtual interfaces', [[0, 'Virtual'], [200, 'Link Aggregation Group (LAG)']]], ['Ethernet (fixed)', [[800, '100BASE-TX (10/100ME)'], [1000, '1000BASE-T (1GE)'], [1150, '10GBASE-T (10GE)'], [1170, '10GBASE-CX4 (10GE)']]], ['Ethernet (modular)', [[1050, 'GBIC (1GE)'], [1100, 'SFP (1GE)'], [1200, 'SFP+ (10GE)'], [1300, 'XFP (10GE)'], [1310, 'XENPAK (10GE)'], [1320, 'X2 (10GE)'], [1350, 'SFP28 (25GE)'], [1400, 'QSFP+ (40GE)'], [1500, 'CFP (100GE)'], [1600, 'QSFP28 (100GE)']]], ['Wireless', [[2600, 'IEEE 802.11a'], [2610, 'IEEE 802.11b/g'], [2620, 'IEEE 802.11n'], [2630, 'IEEE 802.11ac'], [2640, 'IEEE 802.11ad']]], ['FibreChannel', [[3010, 'SFP (1GFC)'], [3020, 'SFP (2GFC)'], [3040, 'SFP (4GFC)'], [3080, 'SFP+ (8GFC)'], [3160, 'SFP+ (16GFC)']]], ['Serial', [[4000, 'T1 (1.544 Mbps)'], [4010, 'E1 (2.048 Mbps)'], [4040, 'T3 (45 Mbps)'], [4050, 'E3 (34 Mbps)']]], ['Stacking', [[5000, 'Cisco StackWise'], [5050, 'Cisco StackWise Plus'], [5100, 'Cisco FlexStack'], [5150, 'Cisco FlexStack Plus'], [5200, 'Juniper VCP']]], ['Other/Unknown', [[32767, 'Other']]]], default=1200)),
                ('enabled', models.BooleanField(default=True)),
                ('mtu', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='MTU')),
                ('mgmt_only', models.BooleanField(default=False, help_text='This interface is used only for out-of-band management', verbose_name='OOB Management')),
                ('description', models.CharField(blank=True, max_length=100)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interfaces', to='infrastructure.Device')),
                ('lag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='member_interfaces', to='infrastructure.Interface', verbose_name='Parent LAG')),
            ],
            options={
                'ordering': ['device', 'name'],
            },
        ),
        migrations.CreateModel(
            name='InterfaceConnection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_status', models.BooleanField(choices=[[False, 'Planned'], [True, 'Connected']], default=True, verbose_name='Status')),
                ('notes', models.TextField(blank=True)),
                ('interface_far', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='connected_as_far', to='infrastructure.Interface')),
                ('interface_near', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='connected_as_near', to='infrastructure.Interface')),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('netmiko_type', models.CharField(blank=True, choices=[(netmiko.a10.a10_ssh.A10SSH, 'a10'), (netmiko.a10.a10_ssh.A10SSH, 'a10_ssh'), (netmiko.accedian.accedian_ssh.AccedianSSH, 'accedian'), (netmiko.accedian.accedian_ssh.AccedianSSH, 'accedian_ssh'), (netmiko.alcatel.alcatel_aos_ssh.AlcatelAosSSH, 'alcatel_aos'), (netmiko.alcatel.alcatel_aos_ssh.AlcatelAosSSH, 'alcatel_aos_ssh'), (netmiko.alcatel.alcatel_sros_ssh.AlcatelSrosSSH, 'alcatel_sros'), (netmiko.alcatel.alcatel_sros_ssh.AlcatelSrosSSH, 'alcatel_sros_ssh'), (netmiko.arista.arista_ssh.AristaSSH, 'arista_eos'), (netmiko.arista.arista_ssh.AristaSSH, 'arista_eos_ssh'), (netmiko.aruba.aruba_ssh.ArubaSSH, 'aruba_os'), (netmiko.aruba.aruba_ssh.ArubaSSH, 'aruba_os_ssh'), (netmiko.avaya.avaya_ers_ssh.AvayaErsSSH, 'avaya_ers'), (netmiko.avaya.avaya_ers_ssh.AvayaErsSSH, 'avaya_ers_ssh'), (netmiko.avaya.avaya_vsp_ssh.AvayaVspSSH, 'avaya_vsp'), (netmiko.avaya.avaya_vsp_ssh.AvayaVspSSH, 'avaya_vsp_ssh'), (netmiko.brocade.brocade_fastiron_ssh.BrocadeFastironSSH, 'brocade_fastiron'), (netmiko.brocade.brocade_fastiron_ssh.BrocadeFastironSSH, 'brocade_fastiron_ssh'), (netmiko.brocade.brocade_netiron_ssh.BrocadeNetironSSH, 'brocade_netiron'), (netmiko.brocade.brocade_netiron_ssh.BrocadeNetironSSH, 'brocade_netiron_ssh'), (netmiko.brocade.brocade_nos_ssh.BrocadeNosSSH, 'brocade_nos'), (netmiko.brocade.brocade_nos_ssh.BrocadeNosSSH, 'brocade_nos_ssh'), (netmiko.brocade.brocade_nos_ssh.BrocadeNosSSH, 'brocade_vdx'), (netmiko.brocade.brocade_nos_ssh.BrocadeNosSSH, 'brocade_vdx_ssh'), (netmiko.vyos.vyos_ssh.VyOSSSH, 'brocade_vyos'), (netmiko.vyos.vyos_ssh.VyOSSSH, 'brocade_vyos_ssh'), (netmiko.checkpoint.checkpoint_gaia_ssh.CheckPointGaiaSSH, 'checkpoint_gaia'), (netmiko.checkpoint.checkpoint_gaia_ssh.CheckPointGaiaSSH, 'checkpoint_gaia_ssh'), (netmiko.ciena.ciena_saos_ssh.CienaSaosSSH, 'ciena_saos'), (netmiko.ciena.ciena_saos_ssh.CienaSaosSSH, 'ciena_saos_ssh'), (netmiko.cisco.cisco_asa_ssh.CiscoAsaSSH, 'cisco_asa'), (netmiko.cisco.cisco_asa_ssh.CiscoAsaSSH, 'cisco_asa_ssh'), (netmiko.cisco.cisco_ios.CiscoIosBase, 'cisco_ios'), (netmiko.cisco.cisco_ios.CiscoIosBase, 'cisco_ios_ssh'), (netmiko.cisco.cisco_nxos_ssh.CiscoNxosSSH, 'cisco_nxos'), (netmiko.cisco.cisco_nxos_ssh.CiscoNxosSSH, 'cisco_nxos_ssh'), (netmiko.cisco.cisco_s300.CiscoS300SSH, 'cisco_s300'), (netmiko.cisco.cisco_s300.CiscoS300SSH, 'cisco_s300_ssh'), (netmiko.cisco.cisco_tp_tcce.CiscoTpTcCeSSH, 'cisco_tp'), (netmiko.cisco.cisco_tp_tcce.CiscoTpTcCeSSH, 'cisco_tp_ssh'), (netmiko.cisco.cisco_wlc_ssh.CiscoWlcSSH, 'cisco_wlc'), (netmiko.cisco.cisco_wlc_ssh.CiscoWlcSSH, 'cisco_wlc_ssh'), (netmiko.cisco.cisco_ios.CiscoIosBase, 'cisco_xe'), (netmiko.cisco.cisco_ios.CiscoIosBase, 'cisco_xe_ssh'), (netmiko.cisco.cisco_xr_ssh.CiscoXrSSH, 'cisco_xr'), (netmiko.cisco.cisco_xr_ssh.CiscoXrSSH, 'cisco_xr_ssh'), (netmiko.dell.dell_force10_ssh.DellForce10SSH, 'dell_force10'), (netmiko.dell.dell_force10_ssh.DellForce10SSH, 'dell_force10_ssh'), (netmiko.dell.dell_powerconnect_ssh.DellPowerConnectSSH, 'dell_powerconnect'), (netmiko.dell.dell_powerconnect_ssh.DellPowerConnectSSH, 'dell_powerconnect_ssh'), (netmiko.eltex.eltex_ssh.EltexSSH, 'eltex'), (netmiko.eltex.eltex_ssh.EltexSSH, 'eltex_ssh'), (netmiko.enterasys.enterasys_ssh.EnterasysSSH, 'enterasys'), (netmiko.enterasys.enterasys_ssh.EnterasysSSH, 'enterasys_ssh'), (netmiko.extreme.extreme_ssh.ExtremeSSH, 'extreme'), (netmiko.extreme.extreme_ssh.ExtremeSSH, 'extreme_ssh'), (netmiko.extreme.extreme_wing_ssh.ExtremeWingSSH, 'extreme_wing'), (netmiko.extreme.extreme_wing_ssh.ExtremeWingSSH, 'extreme_wing_ssh'), (netmiko.f5.f5_ltm_ssh.F5LtmSSH, 'f5_ltm'), (netmiko.f5.f5_ltm_ssh.F5LtmSSH, 'f5_ltm_ssh'), (netmiko.fortinet.fortinet_ssh.FortinetSSH, 'fortinet'), (netmiko.fortinet.fortinet_ssh.FortinetSSH, 'fortinet_ssh'), (netmiko.terminal_server.terminal_server.TerminalServerSSH, 'generic_termserver'), (netmiko.terminal_server.terminal_server.TerminalServerSSH, 'generic_termserver_ssh'), (netmiko.hp.hp_comware_ssh.HPComwareSSH, 'hp_comware'), (netmiko.hp.hp_comware_ssh.HPComwareSSH, 'hp_comware_ssh'), (netmiko.hp.hp_procurve_ssh.HPProcurveSSH, 'hp_procurve'), (netmiko.hp.hp_procurve_ssh.HPProcurveSSH, 'hp_procurve_ssh'), (netmiko.huawei.huawei_ssh.HuaweiSSH, 'huawei'), (netmiko.huawei.huawei_ssh.HuaweiSSH, 'huawei_ssh'), (netmiko.juniper.juniper_ssh.JuniperSSH, 'juniper'), (netmiko.juniper.juniper_ssh.JuniperSSH, 'juniper_ssh'), (netmiko.juniper.juniper_ssh.JuniperSSH, 'juniper_junos'), (netmiko.juniper.juniper_ssh.JuniperSSH, 'juniper_junos_ssh'), (netmiko.linux.linux_ssh.LinuxSSH, 'linux'), (netmiko.linux.linux_ssh.LinuxSSH, 'linux_ssh'), (netmiko.mellanox.mellanox_ssh.MellanoxSSH, 'mellanox_ssh'), (netmiko.mellanox.mellanox_ssh.MellanoxSSH, 'mellanox_ssh_ssh'), (netmiko.mrv.mrv_ssh.MrvOptiswitchSSH, 'mrv_optiswitch'), (netmiko.mrv.mrv_ssh.MrvOptiswitchSSH, 'mrv_optiswitch_ssh'), (netmiko.ovs.ovs_linux_ssh.OvsLinuxSSH, 'ovs_linux'), (netmiko.ovs.ovs_linux_ssh.OvsLinuxSSH, 'ovs_linux_ssh'), (netmiko.paloalto.paloalto_panos_ssh.PaloAltoPanosSSH, 'paloalto_panos'), (netmiko.paloalto.paloalto_panos_ssh.PaloAltoPanosSSH, 'paloalto_panos_ssh'), (netmiko.pluribus.pluribus_ssh.PluribusSSH, 'pluribus'), (netmiko.pluribus.pluribus_ssh.PluribusSSH, 'pluribus_ssh'), (netmiko.quanta.quanta_mesh_ssh.QuantaMeshSSH, 'quanta_mesh'), (netmiko.quanta.quanta_mesh_ssh.QuantaMeshSSH, 'quanta_mesh_ssh'), (netmiko.ubiquiti.edge_ssh.UbiquitiEdgeSSH, 'ubiquiti_edge'), (netmiko.ubiquiti.edge_ssh.UbiquitiEdgeSSH, 'ubiquiti_edge_ssh'), (netmiko.vyos.vyos_ssh.VyOSSSH, 'vyatta_vyos'), (netmiko.vyos.vyos_ssh.VyOSSSH, 'vyatta_vyos_ssh'), (netmiko.vyos.vyos_ssh.VyOSSSH, 'vyos'), (netmiko.vyos.vyos_ssh.VyOSSSH, 'vyos_ssh'), (netmiko.cisco.cisco_ios.CiscoIosBase, 'cisco_ios_telnet'), (netmiko.dell.dell_powerconnect_telnet.DellPowerConnectTelnet, 'dell_powerconnect_telnet'), (netmiko.terminal_server.terminal_server.TerminalServerTelnet, 'generic_termserver_telnet'), (netmiko.terminal_server.terminal_server.TerminalServerSSH, 'terminal_server'), (netmiko.terminal_server.terminal_server.TerminalServerSSH, 'autodetect')], help_text='The name of the Netmiko device type to use when interacting with devices of this platform.', max_length=50, verbose_name='Netmiko device type')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PowerOutlet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='power_outlets', to='infrastructure.Device')),
            ],
        ),
        migrations.CreateModel(
            name='PowerPort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('connection_status', models.NullBooleanField(choices=[[False, 'Planned'], [True, 'Connected']], default=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='power_ports', to='infrastructure.Device')),
                ('power_outlet', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='connected_port', to='infrastructure.PowerOutlet')),
            ],
            options={
                'ordering': ['device', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SerialPort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('connection_status', models.NullBooleanField(choices=[[False, 'Planned'], [True, 'Connected']], default=True)),
                ('connected_to', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='infrastructure.SerialPort', verbose_name='Connected serial port')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='console_ports', to='infrastructure.Device')),
            ],
            options={
                'ordering': ['device', 'name'],
            },
        ),
        migrations.AddField(
            model_name='device',
            name='device_role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='infrastructure.DeviceRole'),
        ),
    ]
